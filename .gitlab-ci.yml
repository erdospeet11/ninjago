image: golang:1.22

variables:
  # Package version should match \A(\.?[\w\+-]+\.?)+\z regular expresion.
  # See https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-package-file
  PACKAGE_VERSION: "0.0.1"
  WINDWOWS_AMD64_BINARY: "NinjaGoBomberMan-windows-amd64-${PACKAGE_VERSION}.exe"
  LINUX_AMD64_BINARY: "NinjaGoBomberMan-linux-amd64-${PACKAGE_VERSION}.bin"
  LINUX_ARM64_BINARY: "NinjaGoBomberMan-linux-arm64-${PACKAGE_VERSION}.bin"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/NinjaGoBomberMan/${PACKAGE_VERSION}"

stages: # List of stages for jobs, and their order of execution
  - testAndLint
  - build
  - upload
  - release

unit-test-job: # This job runs in the test stage.
  stage: testAndLint # It only starts when the job in the build stage completes successfully.
  before_script:
    - go get -v -d ./...
  script:
    - go test ./... -coverpkg=./...

code_coverage:
  stage: testAndLint
  before_script:
    - go get -v -d ./...
    - go get github.com/boumenot/gocover-cobertura
  script:
    - go test ./... -coverprofile=coverage.txt -covermode count
    - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: testAndLint
  script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - "[ -e .golangci.yml ] || cp /golangci/.golangci.yml ."
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --issues-exit-code 1 --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

build-job: # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - go get -v -d ./...
    - mkdir bin
  script:
    - echo "Compiling the code for Windows amd64"
    - GOOS=windows GOARCH=amd64 go build -o bin/${WINDWOWS_AMD64_BINARY} .
    - echo "Compile complete for Windows amd64."
    - echo "Compiling the code for Linux amd64"
    - GOOS=linux GOARCH=amd64 go build -o bin/${LINUX_AMD64_BINARY} .
    - echo "Compile complete for Linux amd64."
    - echo "Compiling the code for Linux arm64"
    - GOOS=linux GOARCH=arm64 go build -o bin/${LINUX_ARM64_BINARY} .
    - echo "Compile complete for Linux arm64."
  artifacts:
    paths:
      - bin/

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${WINDWOWS_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}/${WINDWOWS_AMD64_BINARY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${LINUX_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${LINUX_ARM64_BINARY} ${PACKAGE_REGISTRY_URL}/${LINUX_ARM64_BINARY}

release:
  # Caution, as of 2021-02-02 these assets links require a login, see:
  # https://gitlab.com/gitlab-org/gitlab/-/issues/299384
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${WINDOWS_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WINDOWS_AMD64_BINARY}\"}" \
        --assets-link "{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}" \
        --assets-link "{\"name\":\"${LINUX_ARM64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_ARM64_BINARY}\"}"

  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_DESCRIPTION"
